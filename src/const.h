////////////////////////////////////////////////////////////////////////
// OpenTibia - an opensource roleplaying game
////////////////////////////////////////////////////////////////////////
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
////////////////////////////////////////////////////////////////////////

#pragma once

static constexpr uint16_t NETWORKMESSAGE_MAXSIZE = 65535;
static constexpr uint32_t PLAYER_ID_RANGE = 0x10000000;
static constexpr uint32_t MONSTER_ID_RANGE = 0x40000000;
static constexpr uint32_t NPC_ID_RANGE = 0x80000000;


// Reserved player storage key ranges
//[10000000 - 20000000]
static constexpr uint32_t PSTRG_RESERVED_RANGE_START = 10000000;
static constexpr uint32_t PSTRG_RESERVED_RANGE_SIZE = 10000000;

//[1000 - 1500]
static constexpr uint32_t PSTRG_OUTFITS_RANGE_START = (PSTRG_RESERVED_RANGE_START + 1000);
static constexpr uint32_t PSTRG_OUTFITS_RANGE_SIZE = 500;

//[1500 - 2000]
static constexpr uint32_t PSTRG_OUTFITSID_RANGE_START = (PSTRG_RESERVED_RANGE_START + 1500);
static constexpr uint32_t PSTRG_OUTFITSID_RANGE_SIZE = 500;

static constexpr uint32_t IPBAN_FLAG = 128;
static constexpr uint32_t SWIMMING_OUTFIT = 267;

#define IS_IN_KEYRANGE(key, range) (key >= PSTRG_##range##_START && ((key - PSTRG_##range##_START) <= PSTRG_##range##_SIZE))


enum ThreadState : uint8_t
{
	THREAD_STATE_RUNNING,
	THREAD_STATE_CLOSING,
	THREAD_STATE_TERMINATED,
};

enum OperatingSystem_t : uint16_t
{
	CLIENTOS_LINUX = 1,
	CLIENTOS_WINDOWS = 2,

	CLIENTOS_OTCLIENT_LINUX = 10,
	CLIENTOS_OTCLIENT_WINDOWS = 11,
	CLIENTOS_OTCLIENT_MAC = 12
};

enum ItemSlotBits_t : uint32_t
{
	SLOTP_HEAD     = 1 << 0,
	SLOTP_NECKLACE = 1 << 1,
	SLOTP_BACKPACK = 1 << 2,
	SLOTP_ARMOR    = 1 << 3,
	SLOTP_RIGHT    = 1 << 4,
	SLOTP_LEFT     = 1 << 5,
	SLOTP_LEGS     = 1 << 6,
	SLOTP_FEET     = 1 << 7,
	SLOTP_RING     = 1 << 8,
	SLOTP_AMMO     = 1 << 9,
	SLOTP_DEPOT    = 1 << 10,
	SLOTP_TWO_HAND = 1 << 11,

	SLOTP_HAND = (SLOTP_LEFT | SLOTP_RIGHT),
	SLOTP_WHEREEVER = 0xFFFFFFFF,
};

enum ReportType_t : uint8_t
{
	REPORT_NAME = 0,
	REPORT_STATEMENT = 1,
	REPORT_BOT = 2
};

enum CreatureType_t : uint8_t
{
	CREATURE_TYPE_UNDEFINED,
	CREATURE_TYPE_PLAYER,
	CREATURE_TYPE_MONSTER,
	CREATURE_TYPE_NPC,
};

enum Slots_t : uint8_t
{
	SLOT_WHEREEVER = 0,

	SLOT_HEAD,
	SLOT_NECKLACE,
	SLOT_BACKPACK,
	SLOT_ARMOR,
	SLOT_RIGHT,
	SLOT_LEFT,
	SLOT_LEGS,
	SLOT_FEET,
	SLOT_RING,
	SLOT_AMMO,
	SLOT_DEPOT, // unused (idk the purpose behind this, its just here for compat reasons)
	SLOT_HAND,

	SLOT_FIRST = SLOT_HEAD,
	SLOT_LAST = SLOT_AMMO,
};

enum ReturnValue : uint32_t
{
	RET_NOERROR = 0,
	RET_NOTPOSSIBLE = 1,
	RET_NOTENOUGHROOM = 2,
	RET_PLAYERISPZLOCKED = 3,
	RET_PLAYERISNOTINVITED = 4,
	RET_CANNOTTHROW = 5,
	RET_THEREISNOWAY = 6,
	RET_DESTINATIONOUTOFREACH = 7,
	RET_CREATUREBLOCK = 8,
	RET_NOTMOVABLE = 9,
	RET_DROPTWOHANDEDITEM = 10,
	RET_BOTHHANDSNEEDTOBEFREE = 11,
	RET_CANONLYUSEONEWEAPON = 12,
	RET_NEEDEXCHANGE = 13,
	RET_CANNOTBEDRESSED = 14,
	RET_PUTTHISOBJECTINYOURHAND = 15,
	RET_PUTTHISOBJECTINBOTHHANDS = 16,
	RET_TOOFARAWAY = 17,
	RET_FIRSTGODOWNSTAIRS = 18,
	RET_FIRSTGOUPSTAIRS = 19,
	RET_CONTAINERNOTENOUGHROOM = 20,
	RET_NOTENOUGHCAPACITY = 21,
	RET_CANNOTPICKUP = 22,
	RET_THISISIMPOSSIBLE = 23,
	RET_DEPOTISFULL = 24,
	RET_CREATUREDOESNOTEXIST = 25,
	RET_CANNOTUSETHISOBJECT = 26,
	RET_PLAYERWITHTHISNAMEISNOTONLINE = 27,
	RET_NOTREQUIREDLEVELTOUSERUNE = 28,
	RET_YOUAREALREADYTRADING = 29,
	RET_THISPLAYERISALREADYTRADING = 30,
	RET_YOUMAYNOTLOGOUTDURINGAFIGHT = 31,
	RET_DIRECTPLAYERSHOOT = 32,
	RET_NOTENOUGHLEVEL = 33,
	RET_NOTENOUGHMAGICLEVEL = 34,
	RET_NOTENOUGHMANA = 35,
	RET_NOTENOUGHSOUL = 36,
	RET_YOUAREEXHAUSTED = 37,
	RET_PLAYERISNOTREACHABLE = 38,
	RET_CANONLYUSETHISRUNEONCREATURES = 39,
	RET_ACTIONNOTPERMITTEDINPROTECTIONZONE = 40,
	RET_YOUMAYNOTATTACKTHISPLAYER = 41,
	RET_YOUMAYNOTATTACKAPERSONINPROTECTIONZONE = 42,
	RET_YOUMAYNOTATTACKAPERSONWHILEINPROTECTIONZONE = 43,
	RET_YOUMAYNOTATTACKTHISCREATURE = 44,
	RET_YOUCANONLYUSEITONCREATURES = 45,
	RET_CREATUREISNOTREACHABLE = 46,
	RET_TURNSECUREMODETOATTACKUNMARKEDPLAYERS = 47,
	RET_YOUNEEDPREMIUMACCOUNT = 48,
	RET_YOUNEEDTOLEARNTHISSPELL = 49,
	RET_YOURVOCATIONCANNOTUSETHISSPELL = 50,
	RET_YOUNEEDAWEAPONTOUSETHISSPELL = 51,
	RET_PLAYERISPZLOCKEDLEAVEPVPZONE = 52,
	RET_PLAYERISPZLOCKEDENTERPVPZONE = 53,
	RET_ACTIONNOTPERMITTEDINANOPVPZONE = 54,
	RET_YOUCANNOTLOGOUTHERE = 55,
	RET_YOUNEEDAMAGICITEMTOCASTSPELL = 56,
	RET_CANNOTCONJUREITEMHERE = 57,
	RET_TILEISFULL = 58,
	RET_NAMEISTOOAMBIGUOUS = 59,
	RET_CANONLYUSEONESHIELD = 60,
	RET_YOUARENOTTHEOWNER = 61,
	RET_YOUMAYNOTCASTAREAONBLACKSKULL = 62,
	RET_NOTENOUGHSKILL = 63,
	RET_YOUMAYNOTATTACKIMMEDIATELYAFTERLOGGINGIN = 64,
	RET_YOUHAVETOWAIT = 65,
	RET_YOUCANONLYTRADEUPTOX = 66,
	RET_HOUSEPROTECTED = 67
};

enum MagicEffect_t : uint16_t
{
	MAGIC_EFFECT_DRAW_BLOOD = 0,
	MAGIC_EFFECT_LOSE_ENERGY = 1,
	MAGIC_EFFECT_POFF = 2,
	MAGIC_EFFECT_BLOCKHIT = 3,
	MAGIC_EFFECT_EXPLOSION_AREA = 4,
	MAGIC_EFFECT_EXPLOSION_DAMAGE = 5,
	MAGIC_EFFECT_FIRE_AREA = 6,
	MAGIC_EFFECT_YELLOW_RINGS = 7,
	MAGIC_EFFECT_POISON_RINGS = 8,
	MAGIC_EFFECT_HIT_AREA = 9,
	MAGIC_EFFECT_TELEPORT = 10,
	MAGIC_EFFECT_ENERGY_DAMAGE = 11,
	MAGIC_EFFECT_WRAPS_BLUE = 12,
	MAGIC_EFFECT_WRAPS_RED = 13,
	MAGIC_EFFECT_WRAPS_GREEN = 14,
	MAGIC_EFFECT_HITBY_FIRE = 15,
	MAGIC_EFFECT_POISON = 16,
	MAGIC_EFFECT_MORT_AREA = 17,
	MAGIC_EFFECT_SOUND_GREEN = 18,
	MAGIC_EFFECT_SOUND_RED = 19,
	MAGIC_EFFECT_POISON_AREA = 20,
	MAGIC_EFFECT_SOUND_YELLOW = 21,
	MAGIC_EFFECT_SOUND_PURPLE = 22,
	MAGIC_EFFECT_SOUND_BLUE = 23,
	MAGIC_EFFECT_SOUND_WHITE = 24,
	MAGIC_EFFECT_BUBBLES = 25,
	MAGIC_EFFECT_CRAPS = 26,
	MAGIC_EFFECT_GIFT_WRAPS = 27,
	MAGIC_EFFECT_FIREWORK_YELLOW = 28,
	MAGIC_EFFECT_FIREWORK_RED = 29,
	MAGIC_EFFECT_FIREWORK_BLUE = 30,
	MAGIC_EFFECT_STUN = 31,
	MAGIC_EFFECT_SLEEP = 32,
	MAGIC_EFFECT_WATERCREATURE = 33,
	MAGIC_EFFECT_GROUNDSHAKER = 34,
	MAGIC_EFFECT_HEARTS = 35,
	MAGIC_EFFECT_FIREATTACK = 36,
	MAGIC_EFFECT_ENERGY_AREA = 37,
	MAGIC_EFFECT_SMALLCLOUDS = 38,
	MAGIC_EFFECT_HOLYDAMAGE = 39,
	MAGIC_EFFECT_BIGCLOUDS = 40,
	MAGIC_EFFECT_ICEAREA = 41,
	MAGIC_EFFECT_ICETORNADO = 42,
	MAGIC_EFFECT_ICEATTACK = 43,
	MAGIC_EFFECT_STONES = 44,
	MAGIC_EFFECT_SMALLPLANTS = 45,
	MAGIC_EFFECT_CARNIPHILA = 46,
	MAGIC_EFFECT_PURPLEENERGY = 47,
	MAGIC_EFFECT_YELLOWENERGY = 48,
	MAGIC_EFFECT_HOLYAREA = 49,
	MAGIC_EFFECT_BIGPLANTS = 50,
	MAGIC_EFFECT_CAKE = 51,
	MAGIC_EFFECT_GIANTICE = 52,
	MAGIC_EFFECT_WATERSPLASH = 53,
	MAGIC_EFFECT_PLANTATTACK = 54,
	MAGIC_EFFECT_TUTORIALARROW = 55,
	MAGIC_EFFECT_TUTORIALSQUARE = 56,
	MAGIC_EFFECT_MIRRORHORIZONTAL = 57,
	MAGIC_EFFECT_MIRRORVERTICAL = 58,
	MAGIC_EFFECT_SKULLHORIZONTAL = 59,
	MAGIC_EFFECT_SKULLVERTICAL = 60,
	MAGIC_EFFECT_ASSASSIN = 61,
	MAGIC_EFFECT_STEPSHORIZONTAL = 62,
	MAGIC_EFFECT_BLOODYSTEPS = 63,
	MAGIC_EFFECT_STEPSVERTICAL = 64,
	MAGIC_EFFECT_YALAHARIGHOST = 65,
	MAGIC_EFFECT_BATS = 66,
	MAGIC_EFFECT_SMOKE = 67,
	MAGIC_EFFECT_INSECTS = 68,
	MAGIC_EFFECT_DRAGONHEAD = 69,

	// for internal use, dont send to client
	MAGIC_EFFECT_NONE = 0xFFFF,
};

enum ShootEffect_t : uint16_t
{
	SHOOT_EFFECT_SPEAR = 0,
	SHOOT_EFFECT_BOLT = 1,
	SHOOT_EFFECT_ARROW = 2,
	SHOOT_EFFECT_FIRE = 3,
	SHOOT_EFFECT_ENERGY = 4,
	SHOOT_EFFECT_POISONARROW = 5,
	SHOOT_EFFECT_BURSTARROW = 6,
	SHOOT_EFFECT_THROWINGSTAR = 7,
	SHOOT_EFFECT_THROWINGKNIFE = 8,
	SHOOT_EFFECT_SMALLSTONE = 9,
	SHOOT_EFFECT_DEATH = 10,
	SHOOT_EFFECT_LARGEROCK = 11,
	SHOOT_EFFECT_SNOWBALL = 12,
	SHOOT_EFFECT_POWERBOLT = 13,
	SHOOT_EFFECT_POISONFIELD = 14,
	SHOOT_EFFECT_INFERNALBOLT = 15,
	SHOOT_EFFECT_HUNTINGSPEAR = 16,
	SHOOT_EFFECT_ENCHANTEDSPEAR = 17,
	SHOOT_EFFECT_REDSTAR = 18,
	SHOOT_EFFECT_GREENSTAR = 19,
	SHOOT_EFFECT_ROYALSPEAR = 20,
	SHOOT_EFFECT_SNIPERARROW = 21,
	SHOOT_EFFECT_ONYXARROW = 22,
	SHOOT_EFFECT_PIERCINGBOLT = 23,
	SHOOT_EFFECT_WHIRLWINDSWORD = 24,
	SHOOT_EFFECT_WHIRLWINDAXE = 25,
	SHOOT_EFFECT_WHIRLWINDCLUB = 26,
	SHOOT_EFFECT_ETHEREALSPEAR = 27,
	SHOOT_EFFECT_ICE = 28,
	SHOOT_EFFECT_EARTH = 29,
	SHOOT_EFFECT_HOLY = 30,
	SHOOT_EFFECT_SUDDENDEATH = 31,
	SHOOT_EFFECT_FLASHARROW = 32,
	SHOOT_EFFECT_FLAMMINGARROW = 33,
	SHOOT_EFFECT_SHIVERARROW = 34,
	SHOOT_EFFECT_ENERGYBALL = 35,
	SHOOT_EFFECT_SMALLICE = 36,
	SHOOT_EFFECT_SMALLHOLY = 37,
	SHOOT_EFFECT_SMALLEARTH = 38,
	SHOOT_EFFECT_EARTHARROW = 39,
	SHOOT_EFFECT_EXPLOSION = 40,
	SHOOT_EFFECT_CAKE = 41,

	// for internal use, dont send to client
	SHOOT_EFFECT_WEAPONTYPE = 0xFE, // 254
	SHOOT_EFFECT_NONE = 0xFFFF,
};

enum MessageType_t : uint8_t
{
	MSG_NONE = 0,
	MSG_SPEAK_SAY = 1,
	MSG_SPEAK_WHISPER = 2,
	MSG_SPEAK_YELL = 3,
	MSG_NPC_TO = 4,
	MSG_NPC_FROM = 5,
	MSG_PRIVATE = 6,
	MSG_CHANNEL = 7,
	MSG_CHANNEL_MANAGEMENT = 8,
	MSG_RVR_CHANNEL = 9,
	MSG_RVR_ANSWER = 10,
	MSG_RVR_CONTINUE = 11,
	MSG_GAMEMASTER_BROADCAST = 12,
	MSG_GAMEMASTER_CHANNEL = 13,
	MSG_GAMEMASTER_PRIVATE = 14,
	MSG_GAMEMASTER_PRIVATE_TO = MSG_GAMEMASTER_PRIVATE,
	MSG_CHANNEL_HIGHLIGHT = 15,
	MSG_GAMEMASTER_ANONYMOUS = 16,
	MSG_SPEAK_MONSTER_SAY = 19,
	MSG_SPEAK_MONSTER_YELL = 20,

	MSG_SPEAK_FIRST = MSG_SPEAK_SAY,
	MSG_SPEAK_LAST = MSG_GAMEMASTER_ANONYMOUS,
	MSG_SPEAK_MONSTER_FIRST = MSG_SPEAK_MONSTER_SAY,
	MSG_SPEAK_MONSTER_LAST = MSG_SPEAK_MONSTER_YELL,

	MSG_STATUS_CONSOLE_RED = 18, /*Red message in local chat*/
	MSG_EVENT_ORANGE = 19, /*Orange message in local chat*/
	MSG_STATUS_CONSOLE_ORANGE = 20, /*Orange message in local chat*/
	MSG_STATUS_WARNING = 21, /*Red message in game window and in the console*/
	MSG_EVENT_ADVANCE = 22, /*White message in game window and in the console*/
	MSG_EVENT_DEFAULT = 23, /*White message at the bottom of the game window and in the console*/
	MSG_STATUS_DEFAULT = 24, /*White message at the bottom of the game window and in the console*/
	MSG_INFO_DESCR = 25, /*Green message in game window and in the console*/
	MSG_STATUS_SMALL = 26, /*White message at the bottom of the game window"*/
	MSG_STATUS_CONSOLE_BLUE = 27, /*Teal message in local chat*/

	// for internal use
	MSG_LOOT = MSG_INFO_DESCR, /*Green message in game window and in the console*/
	MSG_TRADE_NPC = MSG_INFO_DESCR, /*Green message in game window and in the console*/
	MSG_EVENT_GUILD = MSG_INFO_DESCR, /*Green message in game window and in the console*/
	MSG_PARTY_MANAGEMENT = MSG_INFO_DESCR, /*Green message in game window and in the console*/
	MSG_PARTY = MSG_INFO_DESCR, /*Green message in game window and in the console*/
	MSG_REPORT = MSG_EVENT_ADVANCE, /*White message in game window and in the console*/
	MSG_HOTKEY_USE = MSG_INFO_DESCR, /*Green message in game window*/
	MSG_DAMAGE_DEALT = MSG_STATUS_DEFAULT,
	MSG_DAMAGE_RECEIVED = MSG_STATUS_DEFAULT,
	MSG_HEALED = MSG_STATUS_DEFAULT,
	MSG_EXPERIENCE = MSG_STATUS_DEFAULT,

	MSG_HIDDEN = 0xFF,
	MSG_DAMAGE_OTHERS = MSG_HIDDEN,
	MSG_HEALED_OTHERS = MSG_HIDDEN,
	MSG_EXPERIENCE_OTHERS = MSG_HIDDEN
};

enum MapMarks_t : uint8_t
{
	MAPMARK_TICK = 0,
	MAPMARK_QUESTION = 1,
	MAPMARK_EXCLAMATION = 2,
	MAPMARK_STAR = 3,
	MAPMARK_CROSS = 4,
	MAPMARK_TEMPLE = 5,
	MAPMARK_KISS = 6,
	MAPMARK_SHOVEL = 7,
	MAPMARK_SWORD = 8,
	MAPMARK_FLAG = 9,
	MAPMARK_LOCK = 10,
	MAPMARK_BAG = 11,
	MAPMARK_SKULL = 12,
	MAPMARK_DOLLAR = 13,
	MAPMARK_REDNORTH = 14,
	MAPMARK_REDSOUTH = 15,
	MAPMARK_REDEAST = 16,
	MAPMARK_REDWEST = 17,
	MAPMARK_GREENNORTH = 18,
	MAPMARK_GREENSOUTH = 19
};

enum FluidColors_t : uint8_t
{
	FLUID_EMPTY = 0,
	FLUID_BLUE = 1,
	FLUID_RED = 2,
	FLUID_BROWN = 3,
	FLUID_GREEN = 4,
	FLUID_YELLOW = 5,
	FLUID_WHITE = 6,
	FLUID_PURPLE = 7
};

enum FluidTypes_t : uint8_t
{
	FLUID_NONE = FLUID_EMPTY,
	FLUID_WATER = FLUID_BLUE,
	FLUID_BLOOD = FLUID_RED,
	FLUID_BEER = FLUID_BROWN,
	FLUID_SLIME = FLUID_GREEN,
	FLUID_LEMONADE = FLUID_YELLOW,
	FLUID_MILK = FLUID_WHITE,
	FLUID_MANA = FLUID_PURPLE,

	FLUID_LIFE = FLUID_RED + 8,
	FLUID_OIL = FLUID_BROWN + 8,
	FLUID_URINE = FLUID_YELLOW + 8,
	FLUID_COCONUTMILK = FLUID_WHITE + 8,
	FLUID_WINE = FLUID_PURPLE + 8,

	FLUID_MUD = FLUID_BROWN + 16,
	FLUID_FRUITJUICE = FLUID_YELLOW + 16,

	FLUID_LAVA = FLUID_RED + 24,
	FLUID_RUM = FLUID_BROWN + 24,
	FLUID_SWAMP = FLUID_GREEN + 24,

	FLUID_TEA = FLUID_BROWN + 32,
	FLUID_MEAD = FLUID_BROWN + 48
};

const uint8_t reverseFluidMap[] = {
	FLUID_EMPTY,
	FLUID_WATER,
	FLUID_MANA,
	FLUID_BEER,
	FLUID_EMPTY,
	FLUID_BLOOD,
	FLUID_SLIME,
	FLUID_EMPTY,
	FLUID_LEMONADE,
	FLUID_MILK
};

const uint8_t clientToServerFluidMap[] = {
	FLUID_EMPTY,
	FLUID_WATER,
	FLUID_MANA,
	FLUID_BEER,
	FLUID_MUD,
	FLUID_BLOOD,
	FLUID_SLIME,
	FLUID_RUM,
	FLUID_LEMONADE,
	FLUID_MILK,
	FLUID_WINE,
	FLUID_LIFE,
	FLUID_URINE,
	FLUID_OIL,
	FLUID_FRUITJUICE,
	FLUID_COCONUTMILK,
	FLUID_TEA,
	FLUID_MEAD
};

enum ClientFluidTypes_t : uint8_t
{
	CLIENTFLUID_EMPTY = 0,
	CLIENTFLUID_BLUE = 1,
	CLIENTFLUID_PURPLE = 2,
	CLIENTFLUID_BROWN_1 = 3,
	CLIENTFLUID_BROWN_2 = 4,
	CLIENTFLUID_RED = 5,
	CLIENTFLUID_GREEN = 6,
	CLIENTFLUID_BROWN = 7,
	CLIENTFLUID_YELLOW = 8,
	CLIENTFLUID_WHITE = 9
};

const uint8_t fluidMap[] = {
	CLIENTFLUID_EMPTY,
	CLIENTFLUID_BLUE,
	CLIENTFLUID_RED,
	CLIENTFLUID_BROWN_1,
	CLIENTFLUID_GREEN,
	CLIENTFLUID_YELLOW,
	CLIENTFLUID_WHITE,
	CLIENTFLUID_PURPLE
};

enum Color_t : uint8_t
{
	COLOR_BLACK = 0,
	COLOR_BLUE = 5,
	COLOR_GREEN = 18,
	COLOR_LIGHTGREEN = 66,
	COLOR_DARKBROWN = 78,
	COLOR_LIGHTBLUE = 89,
	COLOR_MAYABLUE = 95,
	COLOR_DARKRED = 108,
	COLOR_DARKPURPLE = 112,
	COLOR_BROWN = 120,
	COLOR_GREY = 129,
	COLOR_TEAL = 143,
	COLOR_DARKPINK = 152,
	COLOR_PURPLE = 155,
	COLOR_DARKORANGE = 156,
	COLOR_RED = 180,
	COLOR_PINK = 190,
	COLOR_ORANGE = 192,
	COLOR_DARKYELLOW = 205,
	COLOR_YELLOW = 210,
	COLOR_WHITE = 215,

	COLOR_NONE = 255
};

enum Icons_t : uint32_t
{
	ICON_NONE = 0,
	ICON_POISON = 1 << 0,
	ICON_BURN = 1 << 1,
	ICON_ENERGY = 1 << 2,
	ICON_DRUNK = 1 << 3,
	ICON_MANASHIELD = 1 << 4,
	ICON_PARALYZE = 1 << 5,
	ICON_HASTE = 1 << 6,
	ICON_SWORDS = 1 << 7,
	ICON_DROWNING = 1 << 8,
	ICON_FREEZING = 1 << 9,
	ICON_DAZZLED = 1 << 10,
	ICON_CURSED = 1 << 11,
	ICON_BUFF = 1 << 12,
	ICON_PZBLOCK = 1 << 13,
	ICON_PZ = 1 << 14,
	ICON_BLEED = 1 << 15,
	ICON_HUNGRY = 1 << 16
};

enum Skills_t : uint8_t
{
	SKILL_FIST = 0,
	SKILL_CLUB,
	SKILL_SWORD,
	SKILL_AXE,
	SKILL_DIST,
	SKILL_SHIELD,
	SKILL_FISH,

	SKILL__MAGLEVEL,
	SKILL__LEVEL,
	SKILL__EXPERIENCE,

	SKILL_FIRST = SKILL_FIST,
	SKILL_LAST = SKILL_FISH,
	SKILL__LAST = SKILL__EXPERIENCE,

	SKILL_NONE = 0xFF
};

enum WeaponType_t : uint8_t
{
	WEAPON_NONE = 0,
	WEAPON_SWORD,
	WEAPON_CLUB,
	WEAPON_AXE,
	WEAPON_DIST,
	WEAPON_SHIELD,
	WEAPON_FIST,
	WEAPON_WAND,
	WEAPON_AMMO
};

enum Ammo_t : uint8_t
{
	AMMO_NONE = 0,
	AMMO_BOLT,
	AMMO_ARROW,
	AMMO_SPEAR,
	AMMO_THROWINGSTAR,
	AMMO_THROWINGKNIFE,
	AMMO_STONE,
	AMMO_SNOWBALL
};

enum AmmoAction_t : uint8_t
{
	AMMOACTION_NONE = 0,
	AMMOACTION_REMOVECOUNT,
	AMMOACTION_REMOVECHARGE,
	AMMOACTION_MOVE,
	AMMOACTION_MOVEBACK
};

enum WieldInfo_t : uint8_t
{
	WIELDINFO_LEVEL = 1,
	WIELDINFO_MAGLV = 2,
	WIELDINFO_VOCREQ = 4,
	WIELDINFO_PREMIUM = 8
};

enum Skulls_t : uint8_t
{
	SKULL_NONE = 0,
	SKULL_YELLOW,
	SKULL_GREEN,
	SKULL_WHITE,
	SKULL_RED,
	SKULL_BLACK,
	SKULL_LAST = SKULL_BLACK
};

enum PartyShields_t : uint8_t
{
	SHIELD_NONE = 0,
	SHIELD_WHITEYELLOW,
	SHIELD_WHITEBLUE,
	SHIELD_BLUE,
	SHIELD_YELLOW,
	SHIELD_BLUE_SHAREDEXP,
	SHIELD_YELLOW_SHAREDEXP,
	SHIELD_BLUE_NOSHAREDEXP_BLINK,
	SHIELD_YELLOW_NOSHAREDEXP_BLINK,
	SHIELD_BLUE_NOSHAREDEXP,
	SHIELD_YELLOW_NOSHAREDEXP,
	SHIELD_LAST = SHIELD_YELLOW_NOSHAREDEXP
};

enum GuildEmblems_t : uint8_t
{
	GUILDEMBLEM_NONE = 0,
	GUILDEMBLEM_ALLY = 1,
	GUILDEMBLEM_ENEMY = 2,
	GUILDEMBLEM_NEUTRAL = 3
};

enum SpellGroup_t : uint8_t
{
	SPELLGROUP_NONE = 0,
	SPELLGROUP_ATTACK = 1,
	SPELLGROUP_HEALING = 2,
	SPELLGROUP_SUPPORT = 3,
	SPELLGROUP_SPECIAL = 4
};

enum ItemId_t : uint16_t
{
	ITEM_FIREFIELD = 1492,
	ITEM_FIREFIELD_SAFE = 1500,
	ITEM_POISONFIELD = 1496,
	ITEM_POISONFIELD_SAFE = 1503,
	ITEM_ENERGYFIELD = 1495,
	ITEM_ENERGYFIELD_SAFE = 1504,
	ITEM_MAGICWALL = 1497,
	ITEM_MAGICWALL_SAFE = 11098,
	ITEM_WILDGROWTH = 1499,
	ITEM_WILDGROWTH_SAFE = 11099,
	ITEM_DEPOT = 2594,
	ITEM_LOCKER = 2589,
	ITEM_MALE_CORPSE = 3058,
	ITEM_FEMALE_CORPSE = 3065,
	ITEM_FULLSPLASH = 2016,
	ITEM_SMALLSPLASH = 2019,
	ITEM_PARCEL = 2595,
	ITEM_PARCEL_STAMPED = 2596,
	ITEM_LETTER = 2597,
	ITEM_LETTER_STAMPED = 2598,
	ITEM_LABEL = 2599,
	ITEM_WATERBALL_SPLASH = 7711,
	ITEM_WATERBALL = 7956,
	ITEM_STEALTH_RING = 2202,
	ITEM_HOUSE_TRANSFER = 1968
};

enum PlayerFlags : uint32_t
{
	PlayerFlag_CannotUseCombat = 0,
	PlayerFlag_CannotAttackPlayer,
	PlayerFlag_CannotAttackMonster,
	PlayerFlag_CannotBeAttacked,
	PlayerFlag_CanConvinceAll,
	PlayerFlag_CanSummonAll,
	PlayerFlag_CanIllusionAll,
	PlayerFlag_CanSenseInvisibility,
	PlayerFlag_IgnoredByMonsters,
	PlayerFlag_NotGainInFight,
	PlayerFlag_HasInfiniteMana,
	PlayerFlag_HasInfiniteSoul,
	PlayerFlag_HasNoExhaustion,
	PlayerFlag_CannotUseSpells,
	PlayerFlag_CannotPickupItem,
	PlayerFlag_CanAlwaysLogin,
	PlayerFlag_CanBroadcast,
	PlayerFlag_CanEditHouses,
	PlayerFlag_CannotBeBanned,
	PlayerFlag_CannotBePushed,
	PlayerFlag_HasInfiniteCapacity,
	PlayerFlag_CanPushAllCreatures,
	PlayerFlag_CanTalkRedPrivate,
	PlayerFlag_CanTalkRedChannel,
	PlayerFlag_TalkOrangeHelpChannel,
	PlayerFlag_NotGainExperience,
	PlayerFlag_NotGainMana,
	PlayerFlag_NotGainHealth,
	PlayerFlag_NotGainSkill,
	PlayerFlag_SetMaxSpeed,
	PlayerFlag_SpecialVIP,
	PlayerFlag_NotGenerateLoot,
	PlayerFlag_CanTalkRedChannelAnonymous,
	PlayerFlag_IgnoreProtectionZone,
	PlayerFlag_IgnoreSpellCheck,
	PlayerFlag_IgnoreEquipCheck,
	PlayerFlag_CannotBeMuted,
	PlayerFlag_IsAlwaysPremium,
	PlayerFlag_CanAnswerRuleViolations,
	PlayerFlag_39,
	PlayerFlag_ShowGroupNameInsteadOfVocation,
	PlayerFlag_HasInfiniteStamina,
	PlayerFlag_CannotMoveItems,
	PlayerFlag_CannotMoveCreatures,
	PlayerFlag_CanReportBugs,
	PlayerFlag_45,
	PlayerFlag_CannotBeSeen,
	PlayerFlag_HideHealth,
	PlayerFlag_CanPassThroughAllCreatures,
	PlayerFlag_LastFlag
};

enum PlayerCustomFlags : uint32_t
{
	PlayerCustomFlag_AllowIdle = 0,
	PlayerCustomFlag_CanSeePosition,
	PlayerCustomFlag_CanSeeItemDetails,
	PlayerCustomFlag_CanSeeCreatureDetails,
	PlayerCustomFlag_NotSearchable,
	PlayerCustomFlag_GamemasterPrivileges,
	PlayerCustomFlag_CanThrowAnywhere,
	PlayerCustomFlag_CanPushAllItems,
	PlayerCustomFlag_CanMoveAnywhere,
	PlayerCustomFlag_CanMoveFromFar,
	PlayerCustomFlag_CanUseFar,
	PlayerCustomFlag_CanLoginMultipleCharacters,
	PlayerCustomFlag_CanLogoutAnytime,
	PlayerCustomFlag_HideLevel,
	PlayerCustomFlag_IsProtected,
	PlayerCustomFlag_IsImmune,
	PlayerCustomFlag_NotGainSkull,
	PlayerCustomFlag_NotGainUnjustified,
	PlayerCustomFlag_IgnorePacification,
	PlayerCustomFlag_IgnoreLoginDelay,
	PlayerCustomFlag_CanStairhop,
	PlayerCustomFlag_CanTurnhop,
	PlayerCustomFlag_IgnoreHouseRent,
	PlayerCustomFlag_CanWearAllAddons,
	PlayerCustomFlag_IsWalkable,
	PlayerCustomFlag_CanUseAllMounts,
	PlayerCustomFlag_HasFullLight,
	PlayerCustomFlag_LastFlag
};

enum CombatType_t : uint16_t
{
	COMBAT_NONE = 0,

	COMBAT_PHYSICALDAMAGE = 1 << 0,
	COMBAT_ENERGYDAMAGE = 1 << 1,
	COMBAT_EARTHDAMAGE = 1 << 2,
	COMBAT_FIREDAMAGE = 1 << 3,
	COMBAT_UNDEFINEDDAMAGE = 1 << 4,
	COMBAT_LIFEDRAIN = 1 << 5,
	COMBAT_MANADRAIN = 1 << 6,
	COMBAT_HEALING = 1 << 7,
	COMBAT_DROWNDAMAGE = 1 << 8,
	COMBAT_ICEDAMAGE = 1 << 9,
	COMBAT_HOLYDAMAGE = 1 << 10,
	COMBAT_DEATHDAMAGE = 1 << 11,

	COMBATINDEX_PHYSICALDAMAGE = 1,
	COMBATINDEX_ENERGYDAMAGE = 2,
	COMBATINDEX_EARTHDAMAGE = 3,
	COMBATINDEX_FIREDAMAGE = 4,
	COMBATINDEX_UNDEFINEDDAMAGE = 5,
	COMBATINDEX_LIFEDRAIN = 6,
	COMBATINDEX_MANADRAIN = 7,
	COMBATINDEX_HEALING = 8,
	COMBATINDEX_DROWNDAMAGE = 9,
	COMBATINDEX_ICEDAMAGE = 10,
	COMBATINDEX_HOLYDAMAGE = 11,
	COMBATINDEX_DEATHDAMAGE = 12,

	COMBAT_FIRST = COMBAT_PHYSICALDAMAGE,
	COMBAT_LAST = COMBAT_DEATHDAMAGE,

	COMBATINDEX_FIRST = COMBATINDEX_PHYSICALDAMAGE,
	COMBATINDEX_LAST = COMBATINDEX_DEATHDAMAGE,

	COMBAT_ALL = 0, /* for internal use only.*/
};

enum Multiplier_t : uint8_t
{
	MULTIPLIER_FIRST = 0,
	MULTIPLIER_MELEE = MULTIPLIER_FIRST,
	MULTIPLIER_DISTANCE = 1,
	MULTIPLIER_DEFENSE = 2,
	MULTIPLIER_MAGICDEFENSE = 3,
	MULTIPLIER_ARMOR = 4,
	MULTIPLIER_MAGIC = 5,
	MULTIPLIER_HEALING = 6,
	MULTIPLIER_WAND = 7,
	MULTIPLIER_MANA = 8,
	MULTIPLIER_LAST = MULTIPLIER_MANA
};

enum Gain_t : uint8_t
{
	GAIN_FIRST = 0,
	GAIN_HEALTH = GAIN_FIRST,
	GAIN_MANA = 1,
	GAIN_SOUL = 2,
	GAIN_LAST = GAIN_SOUL
};

enum GuildLevel_t : uint8_t
{
	GUILDLEVEL_NONE = 0,
	GUILDLEVEL_MEMBER,
	GUILDLEVEL_VICE,
	GUILDLEVEL_LEADER
};

enum Channels_t : uint16_t
{
	CHANNEL_GUILD = 0x00,
	CHANNEL_PARTY = 0x01,
	CHANNEL_RVR = 0x03,
	CHANNEL_HELP = 0x09,
	CHANNEL_DEFAULT = 0xFFFE, // internal usage only, there is no such channel
	CHANNEL_PRIVATE = 0xFFFF
};

enum ViolationAction_t : uint8_t
{
	ACTION_NOTATION = 0,
	ACTION_NAMEREPORT,
	ACTION_BANISHMENT,
	ACTION_BANREPORT,
	ACTION_BANFINAL,
	ACTION_BANREPORTFINAL,
	ACTION_STATEMENT,
	// internal use
	ACTION_DELETION,
	ACTION_NAMELOCK,
	ACTION_BANLOCK,
	ACTION_BANLOCKFINAL,
	ACTION_PLACEHOLDER
};

enum RaceType_t : uint8_t
{
	RACE_NONE = 0,
	RACE_VENOM,
	RACE_BLOOD,
	RACE_UNDEAD,
	RACE_FIRE,
	RACE_ENERGY
};

enum CombatParam_t : uint8_t
{
	COMBATPARAM_NONE = 0,
	COMBATPARAM_COMBATTYPE,
	COMBATPARAM_EFFECT,
	COMBATPARAM_DISTANCEEFFECT,
	COMBATPARAM_BLOCKEDBYSHIELD,
	COMBATPARAM_BLOCKEDBYARMOR,
	COMBATPARAM_TARGETCASTERORTOPMOST,
	COMBATPARAM_CREATEITEM,
	COMBATPARAM_AGGRESSIVE,
	COMBATPARAM_DISPEL,
	COMBATPARAM_USECHARGES,
	COMBATPARAM_TARGETPLAYERSORSUMMONS,
	COMBATPARAM_DIFFERENTAREADAMAGE,
	COMBATPARAM_HITEFFECT,
	COMBATPARAM_HITCOLOR,
	COMBATPARAM_ELEMENTTYPE,
	COMBATPARAM_ELEMENTDAMAGE
};

enum CallBackParam_t : uint8_t
{
	CALLBACKPARAM_NONE = 0,
	CALLBACKPARAM_LEVELMAGICVALUE,
	CALLBACKPARAM_SKILLVALUE,
	CALLBACKPARAM_TARGETTILECALLBACK,
	CALLBACKPARAM_TARGETCREATURECALLBACK
};

enum ConditionParam_t : uint8_t
{
	CONDITIONPARAM_OWNER = 1,
	CONDITIONPARAM_TICKS,
	CONDITIONPARAM_OUTFIT,
	CONDITIONPARAM_HEALTHGAIN,
	CONDITIONPARAM_HEALTHTICKS,
	CONDITIONPARAM_MANAGAIN,
	CONDITIONPARAM_MANATICKS,
	CONDITIONPARAM_DELAYED,
	CONDITIONPARAM_SPEED,
	CONDITIONPARAM_LIGHT_LEVEL,
	CONDITIONPARAM_LIGHT_COLOR,
	CONDITIONPARAM_SOULGAIN,
	CONDITIONPARAM_SOULTICKS,
	CONDITIONPARAM_MINVALUE,
	CONDITIONPARAM_MAXVALUE,
	CONDITIONPARAM_STARTVALUE,
	CONDITIONPARAM_TICKINTERVAL,
	CONDITIONPARAM_FORCEUPDATE,
	CONDITIONPARAM_SKILL_MELEE,
	CONDITIONPARAM_SKILL_FIST,
	CONDITIONPARAM_SKILL_CLUB,
	CONDITIONPARAM_SKILL_SWORD,
	CONDITIONPARAM_SKILL_AXE,
	CONDITIONPARAM_SKILL_DISTANCE,
	CONDITIONPARAM_SKILL_SHIELD,
	CONDITIONPARAM_SKILL_FISHING,
	CONDITIONPARAM_STAT_MAXHEALTH,
	CONDITIONPARAM_STAT_MAXMANA,
	CONDITIONPARAM_STAT_SOUL,
	CONDITIONPARAM_STAT_MAGICLEVEL,
	CONDITIONPARAM_STAT_MAXHEALTHPERCENT,
	CONDITIONPARAM_STAT_MAXMANAPERCENT,
	CONDITIONPARAM_STAT_SOULPERCENT,
	CONDITIONPARAM_STAT_MAGICLEVELPERCENT,
	CONDITIONPARAM_SKILL_MELEEPERCENT,
	CONDITIONPARAM_SKILL_FISTPERCENT,
	CONDITIONPARAM_SKILL_CLUBPERCENT,
	CONDITIONPARAM_SKILL_SWORDPERCENT,
	CONDITIONPARAM_SKILL_AXEPERCENT,
	CONDITIONPARAM_SKILL_DISTANCEPERCENT,
	CONDITIONPARAM_SKILL_SHIELDPERCENT,
	CONDITIONPARAM_SKILL_FISHINGPERCENT,
	CONDITIONPARAM_PERIODICDAMAGE,
	CONDITIONPARAM_BUFF,
	CONDITIONPARAM_SUBID,
	CONDITIONPARAM_FIELD,
	CONDITIONPARAM_COMBAT_PHYSICALDAMAGE,
	CONDITIONPARAM_COMBAT_ENERGYDAMAGE,
	CONDITIONPARAM_COMBAT_EARTHDAMAGE,
	CONDITIONPARAM_COMBAT_FIREDAMAGE,
	CONDITIONPARAM_COMBAT_UNDEFINEDDAMAGE,
	CONDITIONPARAM_COMBAT_LIFEDRAIN,
	CONDITIONPARAM_COMBAT_MANADRAIN,
	CONDITIONPARAM_COMBAT_HEALING,
	CONDITIONPARAM_COMBAT_DROWNDAMAGE,
	CONDITIONPARAM_COMBAT_ICEDAMAGE,
	CONDITIONPARAM_COMBAT_HOLYDAMAGE,
	CONDITIONPARAM_COMBAT_DEATHDAMAGE
};

enum Exhaust_t : uint8_t
{
	EXHAUST_SPELLGROUP_NONE = 1,
	EXHAUST_SPELLGROUP_ATTACK = 2,
	EXHAUST_SPELLGROUP_HEALING = 3,
	EXHAUST_SPELLGROUP_SUPPORT = 4,
	EXHAUST_SPELLGROUP_SPECIAL = 5,
	EXHAUST_MELEE = 6,
	EXHAUST_USEITEM = 20,
	EXHAUST_POTION = 30,
	EXHAUST_MACHETE = 31
};

enum ExhaustSubId_t : uint8_t
{
	EXHAUST_DEFAULT = 1,
	EXHAUST_TALKNPC = 2,
	EXHAUST_PLAYERVIP = 3,
	EXHAUST_OUTFIT = 4,
	EXHAUST_PARTY = 5,
	EXHAUST_PLAYERSPEAK = 6,
	EXHAUST_PLAYERLOOK = 7,
	EXHAUST_PLAYERTRADE = 8,
	EXHAUST_PLAYEROPENCHANNEL = 9,
	EXHAUST_PLAYERLOOKSHOP = 10,
	EXHAUST_PLAYERLOOKTRADE = 11,
	EXHAUST_PLAYERPURCHASEITEM = 12,
	EXHAUST_PLAYERSELLITEM = 13,
	EXHAUST_TALKACTION = 14
};

enum BlockType_t : uint8_t
{
	BLOCK_NONE = 0,
	BLOCK_DEFENSE,
	BLOCK_ARMOR,
	BLOCK_IMMUNITY
};

enum Reflect_t : uint8_t
{
	REFLECT_FIRST = 0,
	REFLECT_PERCENT = REFLECT_FIRST,
	REFLECT_CHANCE,
	REFLECT_LAST = REFLECT_CHANCE
};

enum Increment_t : uint8_t
{
	INCREMENT_FIRST = 0,
	HEALING_VALUE = INCREMENT_FIRST,
	HEALING_PERCENT,
	MAGIC_VALUE,
	MAGIC_PERCENT,
	INCREMENT_LAST = MAGIC_PERCENT
};

enum Stats_t : uint8_t
{
	STAT_FIRST = 0,
	STAT_MAXHEALTH = STAT_FIRST,
	STAT_MAXMANA,
	STAT_SOUL,
	STAT_LEVEL,
	STAT_MAGICLEVEL,
	STAT_LAST = STAT_MAGICLEVEL
};

enum LossTypes_t : uint8_t
{
	LOSS_FIRST = 0,
	LOSS_EXPERIENCE = LOSS_FIRST,
	LOSS_MANA,
	LOSS_SKILLS,
	LOSS_CONTAINERS,
	LOSS_ITEMS,
	LOSS_LAST = LOSS_ITEMS
};

enum FormulaType_t : uint8_t
{
	FORMULA_UNDEFINED = 0,
	FORMULA_LEVELMAGIC,
	FORMULA_SKILL,
	FORMULA_VALUE
};

enum ConditionId_t : int8_t
{
	CONDITIONID_DEFAULT = -1,
	CONDITIONID_COMBAT = 0,
	CONDITIONID_HEAD,
	CONDITIONID_NECKLACE,
	CONDITIONID_BACKPACK,
	CONDITIONID_ARMOR,
	CONDITIONID_RIGHT,
	CONDITIONID_LEFT,
	CONDITIONID_LEGS,
	CONDITIONID_FEET,
	CONDITIONID_RING,
	CONDITIONID_AMMO,
	CONDITIONID_OUTFIT
};

enum PlayerSex_t : uint8_t
{
	PLAYERSEX_FEMALE = 0,
	PLAYERSEX_MALE
	// DO NOT ADD HERE! Every higher sex is only for your
	// own use- each female should be even and male odd.
};

enum WarType_t : uint8_t
{
	WAR_FIRST = 0,
	WAR_GUILD = WAR_FIRST,
	WAR_ENEMY,
	WAR_LAST = WAR_ENEMY
};

struct CombatDamage
{
	struct
	{
		int32_t value = 0;
		CombatType_t type = COMBAT_NONE;
	} primary, secondary;

	int32_t min = 0;
	int32_t max = 0;
};

struct War_t
{
	War_t()
	{
		war = 0;
		type = WAR_FIRST;

		memset(ids, 0, sizeof(ids));
		memset(frags, 0, sizeof(frags));

		limit = 0;
		payment = 0;
	}

	uint32_t war;
	WarType_t type;

	uint32_t ids[WAR_LAST + 1];
	std::string names[WAR_LAST + 1];
	uint16_t frags[WAR_LAST + 1];

	uint16_t limit;
	uint64_t payment;
};

struct Outfit_t
{
	Outfit_t() = default;
	Outfit_t(uint16_t lookType) : lookType(lookType) {}

	uint16_t lookType = 0;
	uint16_t lookTypeEx = 0;

	uint8_t lookHead = 0;
	uint8_t lookBody = 0;
	uint8_t lookLegs = 0;
	uint8_t lookFeet = 0;
	uint8_t lookAddons = 0;

	bool operator==(const Outfit_t& o) const {
		return (o.lookAddons == lookAddons
			&& o.lookType == lookType && o.lookTypeEx == lookTypeEx
			&& o.lookHead == lookHead && o.lookBody == lookBody
			&& o.lookLegs == lookLegs && o.lookFeet == lookFeet);
	}

	bool operator!=(const Outfit_t& o) const {
		return !(*this == o);
	}
};

struct LightInfo
{
	LightInfo() = default;
	LightInfo(uint8_t level, uint8_t color) :
		level(level),
		color(color) {}

	uint8_t level = 0;
	uint8_t color = 0;
};

struct ShopInfo
{
	ShopInfo() = default;
	ShopInfo(uint16_t itemId) : itemId(itemId) {}

	std::string itemName;
	int32_t subType = 1;
	int32_t buyPrice = -1;
	int32_t sellPrice = -1;
	uint16_t itemId = 0;
};

using ShopInfoList = std::list<ShopInfo>;
